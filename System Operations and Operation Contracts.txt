# System Operations and Operation Contracts

## 1. Operation: makeOffering(offeringDetails)
**Cross References**: 
- Use cases: Enter Organization Offerings

**Preconditions**:
- Administrator is logged in
- An Organization instance exists
- offeringDetails contains valid location, time slot, and offering type
- Specified Location exists in the system
- Specified time slot does not conflict with existing offerings at the location

**Postconditions**:
- A new instance of Offering was created
- The new Offering's attributes were set based on offeringDetails
- The new Offering was associated with the specified Location
- The new Offering was associated with the Organization
- The Offering's status was set to "Available"
- The Offering was added to the Organization's collection of offerings
- The Location's Schedule was updated to include the Offering's time slot
- The system's total number of offerings increased by one

## 2. Operation: viewAvailableOfferings()
**Cross References**: 
- Use cases: View Available Offerings

**Preconditions**:
- User (Client/Instructor) is authenticated

**Postconditions**:
- No system state changes (query operation)
- Returns collection of Offering instances where status is "Available"

## 3. Operation: takeOnOffering(offeringId, instructorId)
**Cross References**: 
- Use cases: Take On Offerings

**Preconditions**:
- Instructor is authenticated
- An Offering instance with offeringId exists
- Offering status is "Available"
- An Instructor instance with instructorId exists
- Instructor's schedule has no conflicts with offering time slot

**Postconditions**:
- The Offering instance's instructor attribute was set to reference the Instructor
- The Offering instance's status was changed to "Assigned"
- The Offering was added to the Instructor's collection of offerings
- The Instructor's schedule was updated to include the offering's time slot
- The Organization's available offerings collection was updated

## 4. Operation: makeBooking(clientId, offeringId, paymentDetails)
**Cross References**: 
- Use cases: Make Booking

**Preconditions**:
- Client is authenticated
- A Client instance with clientId exists
- An Offering instance with offeringId exists
- Offering status is "Available" or "Assigned"
- Payment details are valid
- Client has no conflicting bookings

**Postconditions**:
- A new instance of Booking was created
- The Booking's attributes were set based on the parameters
- The Booking was associated with the specified Client
- The Booking was associated with the specified Offering
- The Booking's status was set to "Confirmed"
- The Booking was added to the Client's collection of bookings
- The Offering's available capacity was decreased by one
- A payment transaction record was created
- The system's total number of bookings increased by one

## 5. Operation: cancelBooking(bookingId)
**Cross References**: 
- Use cases: Cancel Booking

**Preconditions**:
- Client is authenticated
- A Booking instance with bookingId exists
- Booking belongs to the authenticated client
- Booking status is not "Cancelled"

**Postconditions**:
- The Booking instance's status was changed to "Cancelled"
- The associated Offering's available capacity was increased by one
- The Booking was removed from active bookings collection
- The Booking was added to cancelled bookings collection
- A refund transaction record was created (if applicable)
- The Client's active bookings collection was updated

## 6. Operation: registerCredentials(instructorDetails)
**Cross References**: 
- Use cases: Register Credentials and Availability

**Preconditions**:
- instructorDetails contains all required information
- No existing Instructor with the same email exists
- Specified qualifications are valid

**Postconditions**:
- A new instance of Instructor was created
- The Instructor's attributes were set based on instructorDetails
- The Instructor was associated with the specified Organization
- The Instructor's credentials were validated and stored
- The Instructor's initial schedule was created
- The system's total number of instructors increased by one
- The Organization's instructor collection was updated

## 7. Operation: deleteUserAccount(userId)
**Cross References**: 
- Use cases: Delete User Account

**Preconditions**:
- Administrator is logged in
- A User instance with userId exists
- User has no active bookings (if Client)
- User has no active offerings (if Instructor)

**Postconditions**:
- The User instance's status was changed to "Inactive"
- All associated data was marked for archival
- User's authentication credentials were revoked
- User was removed from active users collection
- User was added to archived users collection
- Associated Organization's user collections were updated
- System access permissions for the user were revoked

## 8. Operation: updateSchedule(locationId, scheduleDetails)
**Cross References**: 
- Use cases: Enter Organization Offerings

**Preconditions**:
- Administrator is logged in
- A Location instance with locationId exists
- scheduleDetails contains valid time slots
- No conflicts with existing confirmed bookings
- Location is active in the system

**Postconditions**:
- The Location's Schedule instance was updated
- All new TimeSlot instances were created
- Old TimeSlot instances were marked as inactive
- Affected Offerings' schedules were updated
- Location's available time slots collection was updated
- Notifications were created for affected bookings/offerings
- The system's schedule version number was incremented